"""v2.3.0

Revision ID: 346f4a91caf3
Revises: ce95b86bc010
Create Date: 2024-01-10 11:34:48.880466

"""
import os
import sys

from alembic import op, context
import sqlalchemy as sa

from alembic_postgresql_enum import ColumnType
from geoalchemy2 import Geometry
from sqlalchemy.dialects import postgresql

PROJECT_PATH = os.getcwd()
SOURCE_PATH = os.path.join(
    PROJECT_PATH, "src"
)
sys.path.append(SOURCE_PATH)

# revision identifiers, used by Alembic.
revision = '346f4a91caf3'
down_revision = 'ce95b86bc010'
branch_labels = None
depends_on = None


def upgrade():
    nebenanlagen_enum = postgresql.ENUM('Stellplaetze', 'Garagen', 'Spielplatz', 'Carport', 'Tiefgarage', 'Nebengebaeude',
                                'AbfallSammelanlagen', 'EnergieVerteilungsanlagen', 'AbfallWertstoffbehaelter',
                                'Fahrradstellplaetze', 'Sonstiges',
                                name='bp_zweckbestimmungnebenanlagen', create_type=False)
    if not context.is_offline_mode():
        nebenanlagen_enum.create(op.get_bind(), checkfirst=True)

    op.create_table('bp_nebenanlage',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('zweckbestimmung', postgresql.ARRAY(nebenanlagen_enum)),
                    sa.Column('Zmax', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['id'], ['bp_objekt.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('bp_zweckbestimmung_nebenanlagen',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('allgemein', postgresql.ARRAY(nebenanlagen_enum)),
                    sa.Column('textlicheErgaenzung', sa.String(), nullable=True),
                    sa.Column('aufschrift', sa.String(), nullable=True),
                    sa.Column('nebenanlage_id', sa.UUID(), nullable=True),
                    sa.ForeignKeyConstraint(['nebenanlage_id'], ['bp_nebenanlage.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )

    op.create_foreign_key(None, 'bp_einfahrtpunkt', 'bp_objekt', ['id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'bp_keine_ein_ausfahrt', 'bp_objekt', ['id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'bp_nutzungsgrenze', 'bp_objekt', ['id'], ['id'], ondelete='CASCADE')

    op.add_column('bp_komplexe_sondernutzung', sa.Column('detail_id', sa.UUID(), nullable=True))
    op.add_column('bp_zweckbestimmung_gruen', sa.Column('detail_id', sa.UUID(), nullable=True))

    op.alter_column('lp_plan', 'bundesland',
                    existing_type=postgresql.ENUM('BB', 'BE', 'BW', 'BY', 'HB', 'HE', 'HH', 'MV', 'NI', 'NW', 'RP',
                                                  'SH', 'SL', 'SN', 'ST', 'TH', 'Bund', name='xp_bundeslaender'),
                    nullable=False)
    op.alter_column('lp_plan', 'rechtlicheAussenwirkung',
                    existing_type=sa.BOOLEAN(),
                    nullable=False)
    op.alter_column('so_strassenverkehr', 'hatDarstellungMitBesondZweckbest',
                    existing_type=sa.BOOLEAN(),
                    nullable=False)

    op.create_foreign_key(None, 'xp_objekt', 'xp_gesetzliche_grundlage', ['gesetzlicheGrundlage_id'], ['id'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('bp_komplexe_sondernutzung', 'detail_id')
    op.drop_column('bp_zweckbestimmung_gruen', 'detail_id')

    op.execute("DELETE FROM xp_objekt CASCADE WHERE type in ('bp_nebenanlage');")

    op.drop_table('bp_zweckbestimmung_nebenanlagen')
    op.drop_table('bp_nebenanlage')
    op.execute('DROP TYPE bp_zweckbestimmungnebenanlagen CASCADE;')
    # ### end Alembic commands ###
