"""v1.6.0

Revision ID: 873e18b73036
Revises: 54455ce1e9f6
Create Date: 2022-06-29 08:43:45.136458

"""
import os
import sys

from geoalchemy2 import Geometry
from alembic import op
import sqlalchemy as sa

from sqlalchemy.dialects import postgresql

PROJECT_PATH = os.getcwd()
SOURCE_PATH = os.path.join(
    PROJECT_PATH, "src"
)
sys.path.append(SOURCE_PATH)

# revision identifiers, used by Alembic.
revision = '873e18b73036'
down_revision = '54455ce1e9f6'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('xp_nutzungsschablone',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('position', Geometry(geometry_type='POINT', from_text='ST_GeomFromEWKT',
                                                   name='geometry'), nullable=True),
                    sa.Column('drehwinkel', sa.Integer(), nullable=True),
                    sa.Column('skalierung', sa.Float(), nullable=True),
                    sa.Column('spaltenAnz', sa.Integer(), nullable=False),
                    sa.Column('zeilenAnz', sa.Integer(), nullable=False),
                    sa.Column('hidden', sa.Boolean(), nullable=True),
                    sa.Column('data_attributes', sa.ARRAY(
                        sa.Enum('ArtDerBaulNutzung', 'ZahlVollgeschosse', 'GRZ', 'GFZ', 'BebauungsArt', 'Bauweise',
                                'Dachneigung', 'Dachform', name='buildingtemplatecelldatatype')), nullable=True),
                    sa.ForeignKeyConstraint(['id'], ['xp_po.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )

    op.add_column('xp_po', sa.Column('dientZurDarstellungVon_id', postgresql.UUID(as_uuid=True), nullable=True))
    op.create_foreign_key('fk_po_xp_object', 'xp_po', 'xp_objekt', ['dientZurDarstellungVon_id'], ['id'], ondelete='CASCADE')

    # update data: add `XP_Nutzungsschablone` to all `BP_Baugebietsteilfl√§che`

    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";')

    op.execute(f'INSERT INTO xp_po(id, type, "dientZurDarstellungVon_id") '
               f"SELECT uuid_generate_v4(), 'xp_nutzungsschablone', bp_baugebiet.id FROM bp_baugebiet")

    op.execute('INSERT INTO xp_nutzungsschablone(id, drehwinkel, skalierung, "spaltenAnz", "zeilenAnz", hidden) '
               f"SELECT xp_po.id, 0, 0.5, 2, 3, TRUE FROM xp_po WHERE xp_po.type = 'xp_nutzungsschablone'")

    # add the civil connector tables
    op.execute('''
        create table civil_gemeinde
        (
            id             uuid       not null
                primary key,
            ags            varchar(8) not null,
            rs             varchar(12),
            "gemeindeName" varchar    not null,
            "ortsteilName" varchar
        );

        create table civil_plan
        (
            id          uuid                                   not null
                primary key,
            art         bp_planart default 'BPlan'::bp_planart not null,
            gemeinde_id uuid
                constraint plan_gemeinde_fkey
                    references civil_gemeinde,
            name        varchar(255)                           not null
        );

        create table civil_area
        (
            id              uuid                   not null
                constraint bp_area_pkey
                    primary key,
            layer           varchar(255)           not null,
            rechtscharakter bp_rechtscharakter default 'Unbekannt'::bp_rechtscharakter,
            geom            geometry(MultiPolygon) not null,
            plan_id         uuid
                constraint area_plan_fkey
                    references civil_plan
        );

        create table civil_point
        (
            id              uuid not null
                constraint bp_point_pkey
                    primary key,
            layer           varchar(255),
            rechtscharakter bp_rechtscharakter default 'Unbekannt'::bp_rechtscharakter,
            geom            geometry(Point),
            plan_id         uuid
                constraint point_plan_fkey
                    references civil_plan
        );

        create table civil_line
        (
            id              uuid not null
                constraint bp_line_pkey
                    primary key,
            layer           varchar(255),
            rechtscharakter bp_rechtscharakter default 'Unbekannt'::bp_rechtscharakter,
            geom            geometry(MultiLineString),
            plan_id         uuid
                constraint line_plan_fkey
                    references civil_plan
        );
    ''')


def downgrade():
    op.drop_constraint('fk_po_xp_object', 'xp_po', type_='foreignkey')
    op.drop_column('xp_po', 'dientZurDarstellungVon_id')

    op.drop_table('xp_nutzungsschablone')
    op.execute("DELETE FROM xp_po CASCADE WHERE type in ('xp_nutzungsschablone');")

    op.execute("DROP TYPE buildingtemplatecelldatatype CASCADE;")

    op.execute('DROP TABLE IF EXISTS civil_point, civil_line, civil_area, civil_plan, civil_gemeinde;')
    # ### end Alembic commands ###
