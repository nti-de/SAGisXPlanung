"""v1.4.0

Revision ID: 2cee32cfc646
Revises: 20c50b38b0af
Create Date: 2022-01-21 09:23:22.275548

"""
import os
import sys

from alembic import op, context
import sqlalchemy as sa

from sqlalchemy.dialects import postgresql

PROJECT_PATH = os.getcwd()
SOURCE_PATH = os.path.join(
    PROJECT_PATH, "src"
)
sys.path.append(SOURCE_PATH)

# revision identifiers, used by Alembic.
revision = '2cee32cfc646'
down_revision = '20c50b38b0af'
branch_labels = None
depends_on = None


def upgrade():
    bauweise_enum = postgresql.ENUM('KeineAngabe', 'OffeneBauweise', 'GeschlosseneBauweise', 'AbweichendeBauweise',
                                    name='bp_bauweise', create_type=False)
    bebauungsart_enum = postgresql.ENUM('Einzelhaeuser', 'Doppelhaeuser', 'Hausgruppen', 'EinzelDoppelhaeuser',
                                        'EinzelhaeuserHausgruppen', 'DoppelhaeuserHausgruppen', 'Reihenhaeuser',
                                        'EinzelhaeuserDoppelhaeuserHausgruppen', name='bp_bebauungsart',
                                        create_type=False)
    if not context.is_offline_mode():
        bauweise_enum.create(op.get_bind(), checkfirst=True)
        bebauungsart_enum.create(op.get_bind(), checkfirst=True)

    op.create_table('bp_baulinie',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('bautiefe', sa.Float(), nullable=True),
                    sa.Column('geschossMin', sa.Integer(), nullable=True),
                    sa.Column('geschossMax', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['id'], ['bp_objekt.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('bp_besondere_nutzung',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('FR', sa.Float(), nullable=True),
                    sa.Column('MaxZahlWohnungen', sa.Integer(), nullable=True),
                    sa.Column('MinGRWohneinheit', sa.Float(), nullable=True),
                    sa.Column('Fmin', sa.Float(), nullable=True),
                    sa.Column('Fmax', sa.Float(), nullable=True),
                    sa.Column('Bmin', sa.Float(), nullable=True),
                    sa.Column('Bmax', sa.Float(), nullable=True),
                    sa.Column('Tmin', sa.Float(), nullable=True),
                    sa.Column('Tmax', sa.Float(), nullable=True),
                    sa.Column('GFZmin', sa.Float(), nullable=True),
                    sa.Column('GFZmax', sa.Float(), nullable=True),
                    sa.Column('GFZ', sa.Float(), nullable=True),
                    sa.Column('GFZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('GFmin', sa.Float(), nullable=True),
                    sa.Column('GFmax', sa.Float(), nullable=True),
                    sa.Column('GF', sa.Float(), nullable=True),
                    sa.Column('GF_Ausn', sa.Float(), nullable=True),
                    sa.Column('BMZ', sa.Float(), nullable=True),
                    sa.Column('BMZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('BM', sa.Float(), nullable=True),
                    sa.Column('BM_Ausn', sa.Float(), nullable=True),
                    sa.Column('GRZmin', sa.Float(), nullable=True),
                    sa.Column('GRZmax', sa.Float(), nullable=True),
                    sa.Column('GRZ', sa.Float(), nullable=True),
                    sa.Column('GRZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('GRmin', sa.Float(), nullable=True),
                    sa.Column('GRmax', sa.Float(), nullable=True),
                    sa.Column('GR', sa.Float(), nullable=True),
                    sa.Column('GR_Ausn', sa.Float(), nullable=True),
                    sa.Column('Zmin', sa.Integer(), nullable=True),
                    sa.Column('Zmax', sa.Integer(), nullable=True),
                    sa.Column('Zzwingend', sa.Integer(), nullable=True),
                    sa.Column('Z', sa.Integer(), nullable=True),
                    sa.Column('Z_Ausn', sa.Integer(), nullable=True),
                    sa.Column('Z_Staffel', sa.Integer(), nullable=True),
                    sa.Column('Z_Dach', sa.Integer(), nullable=True),
                    sa.Column('ZUmin', sa.Integer(), nullable=True),
                    sa.Column('ZUmax', sa.Integer(), nullable=True),
                    sa.Column('ZUzwingend', sa.Integer(), nullable=True),
                    sa.Column('ZU', sa.Integer(), nullable=True),
                    sa.Column('ZU_Ausn', sa.Integer(), nullable=True),
                    sa.Column('zweckbestimmung', sa.String(), nullable=True),
                    sa.Column('bauweise', bauweise_enum, nullable=True),
                    sa.Column('bebauungsArt', bebauungsart_enum, nullable=True),
                    sa.ForeignKeyConstraint(['id'], ['bp_objekt.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('bp_gemeinbedarf',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('FR', sa.Integer(), nullable=True),
                    sa.Column('MaxZahlWohnungen', sa.Integer(), nullable=True),
                    sa.Column('MinGRWohneinheit', sa.Float(), nullable=True),
                    sa.Column('Fmin', sa.Float(), nullable=True),
                    sa.Column('Fmax', sa.Float(), nullable=True),
                    sa.Column('Bmin', sa.Float(), nullable=True),
                    sa.Column('Bmax', sa.Float(), nullable=True),
                    sa.Column('Tmin', sa.Float(), nullable=True),
                    sa.Column('Tmax', sa.Float(), nullable=True),
                    sa.Column('GFZmin', sa.Float(), nullable=True),
                    sa.Column('GFZmax', sa.Float(), nullable=True),
                    sa.Column('GFZ', sa.Float(), nullable=True),
                    sa.Column('GFZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('GFmin', sa.Float(), nullable=True),
                    sa.Column('GFmax', sa.Float(), nullable=True),
                    sa.Column('GF', sa.Float(), nullable=True),
                    sa.Column('GF_Ausn', sa.Float(), nullable=True),
                    sa.Column('BMZ', sa.Float(), nullable=True),
                    sa.Column('BMZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('BM', sa.Float(), nullable=True),
                    sa.Column('BM_Ausn', sa.Float(), nullable=True),
                    sa.Column('GRZmin', sa.Float(), nullable=True),
                    sa.Column('GRZmax', sa.Float(), nullable=True),
                    sa.Column('GRZ', sa.Float(), nullable=True),
                    sa.Column('GRZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('GRmin', sa.Float(), nullable=True),
                    sa.Column('GRmax', sa.Float(), nullable=True),
                    sa.Column('GR', sa.Float(), nullable=True),
                    sa.Column('GR_Ausn', sa.Float(), nullable=True),
                    sa.Column('Zmin', sa.Integer(), nullable=True),
                    sa.Column('Zmax', sa.Integer(), nullable=True),
                    sa.Column('Zzwingend', sa.Integer(), nullable=True),
                    sa.Column('Z', sa.Integer(), nullable=True),
                    sa.Column('Z_Ausn', sa.Integer(), nullable=True),
                    sa.Column('Z_Staffel', sa.Integer(), nullable=True),
                    sa.Column('Z_Dach', sa.Integer(), nullable=True),
                    sa.Column('ZUmin', sa.Integer(), nullable=True),
                    sa.Column('ZUmax', sa.Integer(), nullable=True),
                    sa.Column('ZUzwingend', sa.Integer(), nullable=True),
                    sa.Column('ZU', sa.Integer(), nullable=True),
                    sa.Column('ZU_Ausn', sa.Integer(), nullable=True),
                    sa.Column('zweckbestimmung', sa.Enum('OeffentlicheVerwaltung', 'KommunaleEinrichtung',
                                                         'BetriebOeffentlZweckbestimmung', 'AnlageBundLand',
                                                         'BildungForschung', 'Schule', 'Hochschule',
                                                         'BerufsbildendeSchule', 'Forschungseinrichtung', 'Kirche',
                                                         'Sakralgebaeude', 'KirchlicheVerwaltung', 'Kirchengemeinde',
                                                         'Sozial', 'EinrichtungKinder', 'EinrichtungJugendliche',
                                                         'EinrichtungFamilienErwachsene', 'EinrichtungSenioren',
                                                         'SonstigeSozialeEinrichtung', 'EinrichtungBehinderte',
                                                         'Gesundheit', 'Krankenhaus', 'Kultur', 'MusikTheater',
                                                         'Bildung', 'Sport', 'Bad', 'SportplatzSporthalle',
                                                         'SicherheitOrdnung', 'Feuerwehr', 'Schutzbauwerk', 'Justiz',
                                                         'Infrastruktur', 'Post', 'Sonstiges',
                                                         name='xp_zweckbestimmunggemeinbedarf'), nullable=True),
                    sa.Column('bauweise', bauweise_enum, nullable=True),
                    sa.Column('bebauungsArt', bebauungsart_enum , nullable=True),
                    sa.Column('zugunstenVon', sa.String(), nullable=True),
                    sa.ForeignKeyConstraint(['id'], ['bp_objekt.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('bp_gewaesser',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('zweckbestimmung',
                              sa.Enum('Hafen', 'Sportboothafen', 'Wasserflaeche', 'Fliessgewaesser', 'Sonstiges',
                                      name='xp_zweckbestimmunggewaesser'), nullable=True),
                    sa.ForeignKeyConstraint(['id'], ['bp_objekt.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('bp_gruenflaeche',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('MaxZahlWohnungen', sa.Integer(), nullable=True),
                    sa.Column('MinGRWohneinheit', sa.Float(), nullable=True),
                    sa.Column('Fmin', sa.Float(), nullable=True),
                    sa.Column('Fmax', sa.Float(), nullable=True),
                    sa.Column('Bmin', sa.Float(), nullable=True),
                    sa.Column('Bmax', sa.Float(), nullable=True),
                    sa.Column('Tmin', sa.Float(), nullable=True),
                    sa.Column('Tmax', sa.Float(), nullable=True),
                    sa.Column('GFZmin', sa.Float(), nullable=True),
                    sa.Column('GFZmax', sa.Float(), nullable=True),
                    sa.Column('GFZ', sa.Float(), nullable=True),
                    sa.Column('GFZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('GFmin', sa.Float(), nullable=True),
                    sa.Column('GFmax', sa.Float(), nullable=True),
                    sa.Column('GF', sa.Float(), nullable=True),
                    sa.Column('GF_Ausn', sa.Float(), nullable=True),
                    sa.Column('BMZ', sa.Float(), nullable=True),
                    sa.Column('BMZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('BM', sa.Float(), nullable=True),
                    sa.Column('BM_Ausn', sa.Float(), nullable=True),
                    sa.Column('GRZmin', sa.Float(), nullable=True),
                    sa.Column('GRZmax', sa.Float(), nullable=True),
                    sa.Column('GRZ', sa.Float(), nullable=True),
                    sa.Column('GRZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('GRmin', sa.Float(), nullable=True),
                    sa.Column('GRmax', sa.Float(), nullable=True),
                    sa.Column('GR', sa.Float(), nullable=True),
                    sa.Column('GR_Ausn', sa.Float(), nullable=True),
                    sa.Column('Zmin', sa.Integer(), nullable=True),
                    sa.Column('Zmax', sa.Integer(), nullable=True),
                    sa.Column('Zzwingend', sa.Integer(), nullable=True),
                    sa.Column('Z', sa.Integer(), nullable=True),
                    sa.Column('Z_Ausn', sa.Integer(), nullable=True),
                    sa.Column('Z_Staffel', sa.Integer(), nullable=True),
                    sa.Column('Z_Dach', sa.Integer(), nullable=True),
                    sa.Column('ZUmin', sa.Integer(), nullable=True),
                    sa.Column('ZUmax', sa.Integer(), nullable=True),
                    sa.Column('ZUzwingend', sa.Integer(), nullable=True),
                    sa.Column('ZU', sa.Integer(), nullable=True),
                    sa.Column('ZU_Ausn', sa.Integer(), nullable=True),
                    sa.Column('zweckbestimmung', sa.Enum('Parkanlage', 'ParkanlageHistorisch', 'ParkanlageNaturnah',
                                                         'ParkanlageWaldcharakter', 'NaturnaheUferParkanlage',
                                                         'Dauerkleingarten', 'ErholungsGaerten', 'Sportplatz',
                                                         'Reitsportanlage', 'Hundesportanlage', 'Wassersportanlage',
                                                         'Schiessstand', 'Golfplatz', 'Skisport', 'Tennisanlage',
                                                         'Spielplatz', 'Bolzplatz', 'Abenteuerspielplatz', 'Zeltplatz',
                                                         'Campingplatz', 'Badeplatz', 'FreizeitErholung',
                                                         'Kleintierhaltung', 'Festplatz', 'SpezGruenflaeche',
                                                         'StrassenbegleitGruen', 'BoeschungsFlaeche', 'FeldWaldWiese',
                                                         'Uferschutzstreifen', 'Abschirmgruen',
                                                         'UmweltbildungsparkSchaugatter', 'RuhenderVerkehr', 'Friedhof',
                                                         'Sonstiges', 'Gaertnerei', name='xp_zweckbestimmunggruen'),
                              nullable=True),
                    sa.Column('nutzungsform', sa.Enum('Privat', 'Oeffentlich', name='xp_nutzungsform'), nullable=True),
                    sa.Column('zugunstenVon', sa.String(), nullable=True),
                    sa.ForeignKeyConstraint(['id'], ['bp_objekt.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('bp_landwirtschaft',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('zweckbestimmung', sa.Enum('LandwirtschaftAllgemein', 'Ackerbau', 'WiesenWeidewirtschaft',
                                                         'GartenbaulicheErzeugung', 'Obstbau', 'Weinbau', 'Imkerei',
                                                         'Binnenfischerei', 'Sonstiges',
                                                         name='xp_zweckbestimmunglandwirtschaft'), nullable=True),
                    sa.ForeignKeyConstraint(['id'], ['bp_objekt.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('bp_pflanzung',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('massnahme', sa.Enum('BindungErhaltung', 'Anpflanzung', name='xp_abemassnahmentypen'),
                              nullable=True),
                    sa.Column('gegenstand',
                              sa.Enum('Baeume', 'Kopfbaeume', 'Baumreihe', 'Straeucher', 'BaeumeUndStraeucher', 'Hecke',
                                      'Knick', 'SonstBepflanzung', 'Gewaesser', 'Fassadenbegruenung', 'Dachbegruenung',
                                      name='xp_anpflanzungbindungerhaltungsgegenstand'), nullable=True),
                    sa.Column('kronendurchmesser', sa.Float(), nullable=True),
                    sa.Column('pflanztiefe', sa.Float(), nullable=True),
                    sa.Column('istAusgleich', sa.Boolean(), nullable=True),
                    sa.Column('baumArt', sa.String(), nullable=True),
                    sa.Column('mindesthoehe', sa.Float(), nullable=True),
                    sa.Column('anzahl', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['id'], ['bp_objekt.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('bp_spiel_sportanlage',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('MaxZahlWohnungen', sa.Integer(), nullable=True),
                    sa.Column('MinGRWohneinheit', sa.Float(), nullable=True),
                    sa.Column('Fmin', sa.Float(), nullable=True),
                    sa.Column('Fmax', sa.Float(), nullable=True),
                    sa.Column('Bmin', sa.Float(), nullable=True),
                    sa.Column('Bmax', sa.Float(), nullable=True),
                    sa.Column('Tmin', sa.Float(), nullable=True),
                    sa.Column('Tmax', sa.Float(), nullable=True),
                    sa.Column('GFZmin', sa.Float(), nullable=True),
                    sa.Column('GFZmax', sa.Float(), nullable=True),
                    sa.Column('GFZ', sa.Float(), nullable=True),
                    sa.Column('GFZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('GFmin', sa.Float(), nullable=True),
                    sa.Column('GFmax', sa.Float(), nullable=True),
                    sa.Column('GF', sa.Float(), nullable=True),
                    sa.Column('GF_Ausn', sa.Float(), nullable=True),
                    sa.Column('BMZ', sa.Float(), nullable=True),
                    sa.Column('BMZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('BM', sa.Float(), nullable=True),
                    sa.Column('BM_Ausn', sa.Float(), nullable=True),
                    sa.Column('GRZmin', sa.Float(), nullable=True),
                    sa.Column('GRZmax', sa.Float(), nullable=True),
                    sa.Column('GRZ', sa.Float(), nullable=True),
                    sa.Column('GRZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('GRmin', sa.Float(), nullable=True),
                    sa.Column('GRmax', sa.Float(), nullable=True),
                    sa.Column('GR', sa.Float(), nullable=True),
                    sa.Column('GR_Ausn', sa.Float(), nullable=True),
                    sa.Column('Zmin', sa.Integer(), nullable=True),
                    sa.Column('Zmax', sa.Integer(), nullable=True),
                    sa.Column('Zzwingend', sa.Integer(), nullable=True),
                    sa.Column('Z', sa.Integer(), nullable=True),
                    sa.Column('Z_Ausn', sa.Integer(), nullable=True),
                    sa.Column('Z_Staffel', sa.Integer(), nullable=True),
                    sa.Column('Z_Dach', sa.Integer(), nullable=True),
                    sa.Column('ZUmin', sa.Integer(), nullable=True),
                    sa.Column('ZUmax', sa.Integer(), nullable=True),
                    sa.Column('ZUzwingend', sa.Integer(), nullable=True),
                    sa.Column('ZU', sa.Integer(), nullable=True),
                    sa.Column('ZU_Ausn', sa.Integer(), nullable=True),
                    sa.Column('zweckbestimmung', sa.Enum('Sportanlage', 'Spielanlage', 'SpielSportanlage', 'Sonstiges',
                                                         name='xp_zweckbestimmungspielsportanlage'), nullable=True),
                    sa.Column('zugunstenVon', sa.String(), nullable=True),
                    sa.ForeignKeyConstraint(['id'], ['bp_objekt.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('bp_strassenbegrenzung',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('bautiefe', sa.Float(), nullable=True),
                    sa.ForeignKeyConstraint(['id'], ['bp_objekt.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('bp_strassenverkehr',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('MaxZahlWohnungen', sa.Integer(), nullable=True),
                    sa.Column('MinGRWohneinheit', sa.Float(), nullable=True),
                    sa.Column('Fmin', sa.Float(), nullable=True),
                    sa.Column('Fmax', sa.Float(), nullable=True),
                    sa.Column('Bmin', sa.Float(), nullable=True),
                    sa.Column('Bmax', sa.Float(), nullable=True),
                    sa.Column('Tmin', sa.Float(), nullable=True),
                    sa.Column('Tmax', sa.Float(), nullable=True),
                    sa.Column('GFZmin', sa.Float(), nullable=True),
                    sa.Column('GFZmax', sa.Float(), nullable=True),
                    sa.Column('GFZ', sa.Float(), nullable=True),
                    sa.Column('GFZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('GFmin', sa.Float(), nullable=True),
                    sa.Column('GFmax', sa.Float(), nullable=True),
                    sa.Column('GF', sa.Float(), nullable=True),
                    sa.Column('GF_Ausn', sa.Float(), nullable=True),
                    sa.Column('BMZ', sa.Float(), nullable=True),
                    sa.Column('BMZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('BM', sa.Float(), nullable=True),
                    sa.Column('BM_Ausn', sa.Float(), nullable=True),
                    sa.Column('GRZmin', sa.Float(), nullable=True),
                    sa.Column('GRZmax', sa.Float(), nullable=True),
                    sa.Column('GRZ', sa.Float(), nullable=True),
                    sa.Column('GRZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('GRmin', sa.Float(), nullable=True),
                    sa.Column('GRmax', sa.Float(), nullable=True),
                    sa.Column('GR', sa.Float(), nullable=True),
                    sa.Column('GR_Ausn', sa.Float(), nullable=True),
                    sa.Column('Zmin', sa.Integer(), nullable=True),
                    sa.Column('Zmax', sa.Integer(), nullable=True),
                    sa.Column('Zzwingend', sa.Integer(), nullable=True),
                    sa.Column('Z', sa.Integer(), nullable=True),
                    sa.Column('Z_Ausn', sa.Integer(), nullable=True),
                    sa.Column('Z_Staffel', sa.Integer(), nullable=True),
                    sa.Column('Z_Dach', sa.Integer(), nullable=True),
                    sa.Column('ZUmin', sa.Integer(), nullable=True),
                    sa.Column('ZUmax', sa.Integer(), nullable=True),
                    sa.Column('ZUzwingend', sa.Integer(), nullable=True),
                    sa.Column('ZU', sa.Integer(), nullable=True),
                    sa.Column('ZU_Ausn', sa.Integer(), nullable=True),
                    sa.Column('nutzungsform', sa.Enum('Privat', 'Oeffentlich', name='xp_nutzungsform'), nullable=True),
                    sa.ForeignKeyConstraint(['id'], ['bp_objekt.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('bp_verkehr_besonders',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('MaxZahlWohnungen', sa.Integer(), nullable=True),
                    sa.Column('MinGRWohneinheit', sa.Float(), nullable=True),
                    sa.Column('Fmin', sa.Float(), nullable=True),
                    sa.Column('Fmax', sa.Float(), nullable=True),
                    sa.Column('Bmin', sa.Float(), nullable=True),
                    sa.Column('Bmax', sa.Float(), nullable=True),
                    sa.Column('Tmin', sa.Float(), nullable=True),
                    sa.Column('Tmax', sa.Float(), nullable=True),
                    sa.Column('GFZmin', sa.Float(), nullable=True),
                    sa.Column('GFZmax', sa.Float(), nullable=True),
                    sa.Column('GFZ', sa.Float(), nullable=True),
                    sa.Column('GFZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('GFmin', sa.Float(), nullable=True),
                    sa.Column('GFmax', sa.Float(), nullable=True),
                    sa.Column('GF', sa.Float(), nullable=True),
                    sa.Column('GF_Ausn', sa.Float(), nullable=True),
                    sa.Column('BMZ', sa.Float(), nullable=True),
                    sa.Column('BMZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('BM', sa.Float(), nullable=True),
                    sa.Column('BM_Ausn', sa.Float(), nullable=True),
                    sa.Column('GRZmin', sa.Float(), nullable=True),
                    sa.Column('GRZmax', sa.Float(), nullable=True),
                    sa.Column('GRZ', sa.Float(), nullable=True),
                    sa.Column('GRZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('GRmin', sa.Float(), nullable=True),
                    sa.Column('GRmax', sa.Float(), nullable=True),
                    sa.Column('GR', sa.Float(), nullable=True),
                    sa.Column('GR_Ausn', sa.Float(), nullable=True),
                    sa.Column('Zmin', sa.Integer(), nullable=True),
                    sa.Column('Zmax', sa.Integer(), nullable=True),
                    sa.Column('Zzwingend', sa.Integer(), nullable=True),
                    sa.Column('Z', sa.Integer(), nullable=True),
                    sa.Column('Z_Ausn', sa.Integer(), nullable=True),
                    sa.Column('Z_Staffel', sa.Integer(), nullable=True),
                    sa.Column('Z_Dach', sa.Integer(), nullable=True),
                    sa.Column('ZUmin', sa.Integer(), nullable=True),
                    sa.Column('ZUmax', sa.Integer(), nullable=True),
                    sa.Column('ZUzwingend', sa.Integer(), nullable=True),
                    sa.Column('ZU', sa.Integer(), nullable=True),
                    sa.Column('ZU_Ausn', sa.Integer(), nullable=True),
                    sa.Column('zweckbestimmung',
                              sa.Enum('Parkierungsflaeche', 'Fussgaengerbereich', 'VerkehrsberuhigterBereich',
                                      'RadGehweg', 'Radweg', 'Gehweg', 'Wanderweg', 'ReitKutschweg', 'Wirtschaftsweg',
                                      'FahrradAbstellplatz', 'UeberfuehrenderVerkehrsweg', 'UnterfuehrenderVerkehrsweg',
                                      'P_RAnlage', 'Platz', 'Anschlussflaeche', 'LandwirtschaftlicherVerkehr',
                                      'Verkehrsgruen', 'Rastanlage', 'Busbahnhof', 'CarSharing', 'BikeSharing',
                                      'B_RAnlage', 'Parkhaus', 'Mischverkehrsflaeche', 'Ladestation', 'Sonstiges',
                                      name='bp_zweckbestimmungstrassenverkehr'), nullable=True),
                    sa.Column('nutzungsform', sa.Enum('Privat', 'Oeffentlich', name='xp_nutzungsform'), nullable=True),
                    sa.Column('zugunstenVon', sa.String(), nullable=True),
                    sa.ForeignKeyConstraint(['id'], ['bp_objekt.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('bp_versorgung',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('MaxZahlWohnungen', sa.Integer(), nullable=True),
                    sa.Column('MinGRWohneinheit', sa.Float(), nullable=True),
                    sa.Column('Fmin', sa.Float(), nullable=True),
                    sa.Column('Fmax', sa.Float(), nullable=True),
                    sa.Column('Bmin', sa.Float(), nullable=True),
                    sa.Column('Bmax', sa.Float(), nullable=True),
                    sa.Column('Tmin', sa.Float(), nullable=True),
                    sa.Column('Tmax', sa.Float(), nullable=True),
                    sa.Column('GFZmin', sa.Float(), nullable=True),
                    sa.Column('GFZmax', sa.Float(), nullable=True),
                    sa.Column('GFZ', sa.Float(), nullable=True),
                    sa.Column('GFZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('GFmin', sa.Float(), nullable=True),
                    sa.Column('GFmax', sa.Float(), nullable=True),
                    sa.Column('GF', sa.Float(), nullable=True),
                    sa.Column('GF_Ausn', sa.Float(), nullable=True),
                    sa.Column('BMZ', sa.Float(), nullable=True),
                    sa.Column('BMZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('BM', sa.Float(), nullable=True),
                    sa.Column('BM_Ausn', sa.Float(), nullable=True),
                    sa.Column('GRZmin', sa.Float(), nullable=True),
                    sa.Column('GRZmax', sa.Float(), nullable=True),
                    sa.Column('GRZ', sa.Float(), nullable=True),
                    sa.Column('GRZ_Ausn', sa.Float(), nullable=True),
                    sa.Column('GRmin', sa.Float(), nullable=True),
                    sa.Column('GRmax', sa.Float(), nullable=True),
                    sa.Column('GR', sa.Float(), nullable=True),
                    sa.Column('GR_Ausn', sa.Float(), nullable=True),
                    sa.Column('Zmin', sa.Integer(), nullable=True),
                    sa.Column('Zmax', sa.Integer(), nullable=True),
                    sa.Column('Zzwingend', sa.Integer(), nullable=True),
                    sa.Column('Z', sa.Integer(), nullable=True),
                    sa.Column('Z_Ausn', sa.Integer(), nullable=True),
                    sa.Column('Z_Staffel', sa.Integer(), nullable=True),
                    sa.Column('Z_Dach', sa.Integer(), nullable=True),
                    sa.Column('ZUmin', sa.Integer(), nullable=True),
                    sa.Column('ZUmax', sa.Integer(), nullable=True),
                    sa.Column('ZUzwingend', sa.Integer(), nullable=True),
                    sa.Column('ZU', sa.Integer(), nullable=True),
                    sa.Column('ZU_Ausn', sa.Integer(), nullable=True),
                    sa.Column('zweckbestimmung',
                              sa.Enum('Elektrizitaet', 'Hochspannungsleitung', 'TrafostationUmspannwerk',
                                      'Solarkraftwerk', 'Windkraftwerk', 'Geothermiekraftwerk', 'Elektrizitaetswerk',
                                      'Wasserkraftwerk', 'BiomasseKraftwerk', 'Kabelleitung', 'Niederspannungsleitung',
                                      'Leitungsmast', 'Kernkraftwerk', 'Kohlekraftwerk', 'Gaskraftwerk', 'Gas',
                                      'Ferngasleitung', 'Gaswerk', 'Gasbehaelter', 'Gasdruckregler', 'Gasstation',
                                      'Gasleitung', 'Erdoel', 'Erdoelleitung', 'Bohrstelle', 'Erdoelpumpstation',
                                      'Oeltank', 'Waermeversorgung', 'Blockheizkraftwerk', 'Fernwaermeleitung',
                                      'Fernheizwerk', 'Wasser', 'Wasserwerk', 'Wasserleitung', 'Wasserspeicher',
                                      'Brunnen', 'Pumpwerk', 'Quelle', 'Abwasser', 'Abwasserleitung',
                                      'Abwasserrueckhaltebecken', 'Abwasserpumpwerk', 'Klaeranlage',
                                      'AnlageKlaerschlamm', 'SonstigeAbwasserBehandlungsanlage',
                                      'SalzOderSoleleitungen', 'Regenwasser', 'RegenwasserRueckhaltebecken',
                                      'Niederschlagswasserleitung', 'Abfallentsorgung', 'Muellumladestation',
                                      'Muellbeseitigungsanlage', 'Muellsortieranlage', 'Recyclinghof', 'Ablagerung',
                                      'Erdaushubdeponie', 'Bauschuttdeponie', 'Hausmuelldeponie', 'Sondermuelldeponie',
                                      'StillgelegteDeponie', 'RekultivierteDeponie', 'Telekommunikation',
                                      'Fernmeldeanlage', 'Mobilfunkanlage', 'Fernmeldekabel', 'ErneuerbareEnergien',
                                      'KraftWaermeKopplung', 'Sonstiges', 'Produktenleitung',
                                      name='xp_zweckbestimmungverentsorgung'), nullable=True),
                    sa.Column('textlicheErgaenzung', sa.String(), nullable=True),
                    sa.Column('zugunstenVon', sa.String(), nullable=True),
                    sa.ForeignKeyConstraint(['id'], ['bp_objekt.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('bp_wald',
                    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('zweckbestimmung',
                              sa.Enum('Naturwald', 'Waldschutzgebiet', 'Nutzwald', 'Erholungswald', 'Schutzwald',
                                      'Bodenschutzwald', 'Biotopschutzwald', 'NaturnaherWald',
                                      'SchutzwaldSchaedlicheUmwelteinwirkungen', 'Schonwald', 'Bannwald',
                                      'FlaecheForstwirtschaft', 'ImmissionsgeschaedigterWald', 'Sonstiges',
                                      name='xp_zweckbestimmungwald'), nullable=True),
                    sa.Column('eigentumsart',
                              sa.Enum('OeffentlicherWald', 'Staatswald', 'Koerperschaftswald', 'Kommunalwald',
                                      'Stiftungswald', 'Privatwald', 'Gemeinschaftswald', 'Genossenschaftswald',
                                      'Kirchenwald', 'Sonstiges', name='xp_eigentumsartwald'), nullable=True),
                    sa.Column('betreten',
                              sa.Enum('KeineZusaetzlicheBetretung', 'Radfahren', 'Reiten', 'Fahren', 'Hundesport',
                                      'Sonstiges', name='xp_waldbetretungtyp'), nullable=True),
                    sa.ForeignKeyConstraint(['id'], ['bp_objekt.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.add_column('bp_dachgestaltung', sa.Column('besondere_nutzung_id', postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column('bp_dachgestaltung', sa.Column('gemeinbedarf_id', postgresql.UUID(as_uuid=True), nullable=True))
    op.create_foreign_key('fk_dachgestaltung_gemeinbedarf', 'bp_dachgestaltung', 'bp_gemeinbedarf', ['gemeinbedarf_id'],
                          ['id'], ondelete='CASCADE')
    op.create_foreign_key('fk_dachgestaltung_besondere_nutzung', 'bp_dachgestaltung', 'bp_besondere_nutzung',
                          ['besondere_nutzung_id'], ['id'], ondelete='CASCADE')


def downgrade():
    op.drop_constraint('fk_dachgestaltung_gemeinbedarf', 'bp_dachgestaltung', type_='foreignkey')
    op.drop_constraint('fk_dachgestaltung_besondere_nutzung', 'bp_dachgestaltung', type_='foreignkey')
    op.drop_column('bp_dachgestaltung', 'gemeinbedarf_id')
    op.drop_column('bp_dachgestaltung', 'besondere_nutzung_id')

    op.execute("DROP TYPE xp_waldbetretungtyp CASCADE;")
    op.execute("DROP TYPE xp_eigentumsartwald CASCADE;")
    op.execute("DROP TYPE xp_zweckbestimmungwald CASCADE;")
    op.execute("DROP TYPE xp_zweckbestimmungverentsorgung CASCADE;")
    op.execute("DROP TYPE bp_zweckbestimmungstrassenverkehr CASCADE;")
    op.execute("DROP TYPE xp_zweckbestimmungspielsportanlage CASCADE;")
    op.execute("DROP TYPE xp_anpflanzungbindungerhaltungsgegenstand CASCADE;")
    op.execute("DROP TYPE xp_zweckbestimmunglandwirtschaft CASCADE;")
    op.execute("DROP TYPE xp_zweckbestimmunggruen CASCADE;")
    op.execute("DROP TYPE xp_zweckbestimmunggewaesser CASCADE;")
    op.execute("DROP TYPE xp_zweckbestimmunggemeinbedarf CASCADE;")
    op.execute("DROP TYPE xp_nutzungsform CASCADE;")
    op.execute("DROP TYPE xp_abemassnahmentypen CASCADE;")

    op.execute("DELETE FROM xp_objekt CASCADE WHERE type in ('bp_versorgung', 'bp_wald', 'bp_verkehr_besonders', "
               "'bp_strassenverkehr', 'bp_strassenbegrenzung', 'bp_spiel_sportanlage', 'bp_pflanzung', "
               "'bp_landwirtschaft', 'bp_gruenflaeche', 'bp_gewaesser', 'bp_gemeinbedarf', 'bp_besondere_nutzung', "
               "'bp_baulinie');")

    op.drop_table('bp_wald')
    op.drop_table('bp_versorgung')
    op.drop_table('bp_verkehr_besonders')
    op.drop_table('bp_strassenverkehr')
    op.drop_table('bp_strassenbegrenzung')
    op.drop_table('bp_spiel_sportanlage')
    op.drop_table('bp_pflanzung')
    op.drop_table('bp_landwirtschaft')
    op.drop_table('bp_gruenflaeche')
    op.drop_table('bp_gewaesser')
    op.drop_table('bp_gemeinbedarf')
    op.drop_table('bp_besondere_nutzung')
    op.drop_table('bp_baulinie')
